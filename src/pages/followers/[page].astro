---
import HomeLayout from '../../layouts/HomeLayout.astro';
import FollowerCard from '../../components/FollowerCard.astro';
import siteConfig from '../../config/site.config.json';

export async function getStaticPaths() {
  const CLIENT_USERNAME = siteConfig.hiveUsername;
  const DATA_REPO_BASE_URL = 'https://raw.githubusercontent.com/quigua/hived-static-content/main/data';
  const followersDataUrl = `${DATA_REPO_BASE_URL}/${CLIENT_USERNAME}/followers.json`;

  const response = await fetch(followersDataUrl);
  const data = await response.json();
  const totalPages = data.totalPages;

  let paths = [];
  if (totalPages > 0 && data.pages) {
    for (let i = 1; i <= totalPages; i++) {
      const currentPageData = data.pages[i - 1];
      if (currentPageData) {
        paths.push({
          params: { page: i.toString() },
          props: { 
            followers: currentPageData.followers, 
            totalPages: totalPages 
          }
        });
      }
    }
  }
  return paths;
}

export const prerender = true;

const { followers, totalPages } = Astro.props;
const currentPage = parseInt(Astro.params.page);
const hiveUsername = siteConfig.hiveUsername;
const avatarUrl = `https://images.hive.blog/u/${hiveUsername}/avatar`;
const finalCoverUrl = `https://images.hive.blog/u/${hiveUsername}/cover`;

const getPagination = (currentPage, totalPages) => {
  const delta = 2;
  const left = currentPage - delta;
  const right = currentPage + delta + 1;
  const range = [];
  const rangeWithDots = [];
  let l;

  for (let i = 1; i <= totalPages; i++) {
    if (i === 1 || i === totalPages || (i >= left && i < right)) {
      range.push(i);
    }
  }

  for (const i of range) {
    if (l) {
      if (i - l === 2) {
        rangeWithDots.push(l + 1);
      } else if (i - l !== 1) {
        rangeWithDots.push('...');
      }
    }
    rangeWithDots.push(i);
    l = i;
  }
  return rangeWithDots;
};

const pagination = getPagination(currentPage, totalPages);
---

<HomeLayout title="Quigua Followers" hiveUsername={hiveUsername} avatarUrl={avatarUrl} finalCoverUrl={finalCoverUrl} siteConfig={siteConfig} breadcrumbs={[{ label: 'Home', href: '/' }, { label: 'Followers', href: '/followers' }, { label: `Page ${currentPage}`, href: `/followers/${currentPage}` }]}>
  <Fragment slot="hero">
    <h2>Our Amazing Followers</h2>
    <p>Discover the people who support us</p>
  </Fragment>

  <Fragment slot="posts">
    <div class="follower-grid">
      {
        followers && followers.length > 0 ? (
          followers.map((follower) => (
            <FollowerCard follower={follower} />
          ))
        ) : (
          <p>No followers found or data is still loading.</p>
        )
      }
    </div>
    <nav class="pagination">
      {pagination.map((page) =>
        page === '...' ? (
          <span class="ellipsis">...</span>
        ) : (
          <a href={`/followers/${page}`} class={page === currentPage ? 'active' : ''}>
            {page}
          </a>
        )
      )}
    </nav>
  </Fragment>

  <Fragment slot="sidebar">
    <h3>Categories</h3>
    <ul>
      <li><a href="/tecnologia">Tecnolog√≠a</a></li>
      <li><a href="/viajes">Viajes</a></li>
    </ul>
    <h3>Other Elements</h3>
    <p>Additional sidebar content.</p>
  </Fragment>

  <Fragment slot="footer">
    <p>&copy; 2025 Mi Blog. All rights reserved.</p>
  </Fragment>
</HomeLayout>

<style>
  .follower-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 20px;
    margin-bottom: 2rem;
  }

  .pagination {
    display: flex;
    justify-content: center;
    gap: 10px;
    flex-wrap: wrap;
  }

  .pagination a {
    padding: 0.5rem 1rem;
    border: 1px solid var(--color-border);
    border-radius: 5px;
    text-decoration: none;
    color: var(--color-primary);
  }

  .pagination a.active {
    background-color: var(--color-primary);
    color: var(--color-text-light);
  }

  .pagination a:hover {
    background-color: var(--color-secondary);
  }

  .pagination .ellipsis {
    padding: 0.5rem 1rem;
    color: var(--color-text-muted);
  }
</style>
